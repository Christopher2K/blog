---
import { css } from "@/style/css";
import { vstack, hstack } from "@/style/patterns";
import { format } from "@/utils/date";
import { t } from "@/i18n";

import Base from "@/layouts/Base.astro";
import Navbar from "@/components/Navbar.astro";
import Tag from "@/components/Tag.astro";
import { getBlogCollection } from "@/article";

export async function getStaticPaths({ lang = "fr" }: { lang?: string }) {
  const blogCollection = await getBlogCollection(lang);

  const paths = await Promise.all(
    blogCollection.map(async (entry) => {
      return {
        params: { slug: entry.slug },
        props: {
          entry,
          lang,
        },
      };
    }),
  );

  return paths;
}

const { entry, lang } = Astro.props;
const { Content } = await entry.render();

const frUrl = lang === "fr" ? entry.path : entry?.translation?.path ?? "/en";
const enUrl = lang === "en" ? entry.path : entry?.translation?.path ?? "/";
---

<Base
  title={entry.data.title}
  description={entry.data.description}
  ogType="article"
>
  <Navbar frUrl={frUrl} enUrl={enUrl} />
  <div class={css({ maxWidth: "800px", mx: "auto", px: "6" })}>
    <header class={vstack({ gap: "2", alignItems: "flex-start", mb: "10" })}>
      <h1 class={css({ textStyle: "heading1", textWrap: "balance" })}>
        {entry.data.title}
      </h1>
      <p class={css({ textStyle: "label" })}>
        {t("blog:publishedOn", { date: format(entry.data.publishingDate) })}
      </p>
      {
        entry.translation && (
          <a
            class={css({
              textStyle: "label",
              textDecoration: "underline",
              fontWeight: "bold",
              mb: "6",
              color: "orange.700",

              _hover: {
                backgroundColor: "orange.100",
              },
            })}
            href={entry.translation.path}
          >
            {t("blog:alternateLangLink")}
          </a>
        )
      }
      <p
        class={css({
          textStyle: "body",
          fontWeight: "bold",
          color: "neutral.600",
        })}
      >
        {entry.data.description}
      </p>
      {
        entry.data.tags.length > 0 && (
          <ul class={hstack({ flexWrap: "wrap", gap: "4" })}>
            {entry.data.tags.map((tag) => (
              <li>
                <Tag name={tag} />
              </li>
            ))}
          </ul>
        )
      }

      <hr
        class={css({
          borderColor: "neutral.950",
          width: "100%",
          mt: "8",
        })}
      />
    </header>
    <div
      class={css({
        "& h2": {
          textStyle: "heading2",
          mb: "10",
          mt: "16",
          textWrap: "pretty",
        },
        "& h3": {
          textStyle: "heading3",
          mb: "8",
          mt: "14",
          textWrap: "pretty",
        },
        "& h4": {
          textStyle: "heading4",
          mb: "6",
          mt: "12",
          textWrap: "pretty",
        },
        "& h2 + h3": {
          mt: "-6",
        },
        "& p": {
          textStyle: "body",
          mb: "5",
        },
        "& a": {
          textDecoration: "underline",
          color: "orange.700",
          fontWeight: "bold",
          _hover: {
            backgroundColor: "orange.100",
          },
        },
        "& pre": {
          borderRadius: "md",
          p: "4",
          my: "10",
        },
        "& img": {
          mx: "auto",
          my: "10",
          width: "100%",
        },

        "& blockquote": {
          my: "10",
          py: "6",
          px: "10",
          backgroundColor: "neutral.100",
          borderLeft: "4px solid",
          borderColor: "neutral.700",
          borderRightRadius: "md",

          "& p": {
            margin: "0",
            fontWeight: "bold",
          },
        },

        "& ul, & ol": {
          my: "10",
          px: "8",
          listStyle: "inside disc",
        },

        "& li": {
          textStyle: "body",
        },

        "& p + ul, & p + ol": {
          mt: "0",
        },

        "& p code, & li code": {
          display: "inline-block",
          backgroundColor: "neutral.200",
          borderRadius: "md",
          px: "1",
          fontWeight: "bold",
        },
      })}
    >
      <Content />
    </div>
  </div>
</Base>
