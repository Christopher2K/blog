---
import { getCollection, getEntry } from "astro:content";

import { css } from "@/style/css";
import { vstack, hstack } from "@/style/patterns";
import { format } from "@/utils/date";
import { t } from "@/i18n";

import Base from "@/layouts/Base.astro";
import Navbar from "@/components/Navbar.astro";
import Tag from "@/components/Tag.astro";

export async function getStaticPaths({ lang = "fr" }: { lang?: string }) {
  const alternateLang = lang === "fr" ? "en" : "fr";

  const blogCollection = await getCollection(
    "blog",
    ({ data, id }) =>
      id.startsWith(lang) && Boolean(import.meta.env.DEV || !data.draft),
  );

  const paths = await Promise.all(
    blogCollection.map(async (entry) => {
      const alternateEntry = entry.data?.translation
        ? await getEntry("blog", entry.data.translation)
        : await Promise.resolve(undefined);

      return {
        params: { slug: entry.slug },
        props: {
          entry,
          lang,
          alternateLang,
          alternateEntry,
        },
      };
    }),
  );

  return paths;
}

const { entry, alternateLang, alternateEntry, lang } = Astro.props;
const { Content } = await entry.render();
const alternateLangLink = ["", alternateLang, "blog", alternateEntry?.slug]
  .filter((chunk) => chunk !== "fr")
  .join("/");

const frUrl =
  lang === "fr"
    ? Astro.url.pathname
    : alternateEntry
      ? alternateLangLink
      : "/en";
const enUrl =
  lang === "en" ? Astro.url.pathname : alternateEntry ? alternateLangLink : "/";
---

<Base
  title={entry.data.title}
  description={entry.data.description}
  ogType="article"
>
  <Navbar frUrl={frUrl} enUrl={enUrl} />
  <div class={css({ maxWidth: "800px", mx: "auto", px: "6" })}>
    <header class={vstack({ gap: "2", alignItems: "flex-start", mb: "10" })}>
      <h1 class={css({ textStyle: "heading1" })}>
        {entry.data.title}
      </h1>
      <p class={css({ textStyle: "label" })}>
        {t("blog:publishedOn", { date: format(entry.data.publishingDate) })}
      </p>
      {
        alternateLangLink && (
          <a
            class={css({
              textStyle: "label",
              textDecoration: "underline",
              fontWeight: "bold",
              mb: "6",
              color: "orange.700",

              _hover: {
                backgroundColor: "orange.100",
              },
            })}
            href={alternateLangLink}
          >
            {t("blog:alternateLangLink")}
          </a>
        )
      }
      <p
        class={css({
          textStyle: "body",
          fontWeight: "bold",
          color: "neutral.600",
        })}
      >
        {entry.data.description}
      </p>
      {
        entry.data.tags.length > 0 && (
          <ul class={hstack({ flexWrap: "wrap", gap: "4" })}>
            {entry.data.tags.map((tag) => (
              <li>
                <Tag name={tag} />
              </li>
            ))}
          </ul>
        )
      }

      <hr
        class={css({
          borderColor: "neutral.950",
          width: "100%",
          mt: "8",
        })}
      />
    </header>
    <div
      class={css({
        "& h2": { textStyle: "heading2", mb: "10", mt: "16" },
        "& h3": { textStyle: "heading3", mb: "8", mt: "14" },
        "& h4": { textStyle: "heading4", mb: "6", mt: "12" },
        "& p": {
          textStyle: "body",
          mb: "5",
        },
        "& a": {
          textDecoration: "underline",
          color: "orange.700",
          fontWeight: "bold",
          _hover: {
            backgroundColor: "orange.100",
          },
        },
        "& pre": {
          borderRadius: "md",
          p: "4",
          my: "10",
        },
        "& img": {
          mx: "auto",
          my: "10",
          width: "100%",
        },

        "& blockquote": {
          my: "10",
          py: "6",
          px: "10",
          backgroundColor: "neutral.100",
          borderLeft: "4px solid",
          borderColor: "neutral.700",
          borderRightRadius: "md",

          "& p": {
            margin: "0",
            fontWeight: "bold",
          },
        },

        "& ul, & ol": {
          my: "10",
          px: "8",
          listStyle: "inside disc",
        },

        "& li": {
          textStyle: "body",
        },

        "& p + ul, & p + ol": {
          mt: "0",
        },

        "& p code, & li code": {
          display: "inline-block",
          backgroundColor: "neutral.200",
          borderRadius: "md",
          px: "1",
          fontWeight: "bold",
        },
      })}
    >
      <Content />
    </div>
  </div>
</Base>
